module simple where

data StateType 		
  = Q0  
  | Q1
  | Q2
    deriving (Eq, Show)

template Market
  with 
    owner       : Int
    buyer       : Int
    state       : StateType

  where
    signatory owner 
    ensure owner /= buyer  
    observer buyer

    choice makeOffer : ItemId 
     
      controller owner
        do
          assertMsg "Item is not available for an offer." this.state == Q0
          assertMsg "mensagem" 1 + 3 = balance

          create Market with
            state  = Q2
            owner = buyer

    choice accept : ItemId
      controller owner
        do
          assertMsg "Item is not available for an offer." this.state == Q0
          assert 5 != buyer

          create Market with
            state  = Q1

    choice reject : ItemId
      controller owner
        do
          assertMsg "Item is not available for an offer." this.state == Q1

          create Market with
            state  = Q1

    choice thinks : ItemId
      controller owner
        do
          assertMsg "Item is not available for an offer." this.state == Q1

          create Market with
            state  = Q1

    choice anotherOne : ItemId
      controller owner
        do
          assertMsg "Item is not available for an offer." this.state == Q2

          create Market with
            state  = Q1

  